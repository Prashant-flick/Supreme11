// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id          String @id @unique @default(cuid())
  name        String
  email       String @unique
  password    String
  publicKey   String?
  role        UserRole
  teams       UserTeams[]
  tournaments Tournament[]
}

model UserTeams{
  id                String @id @unique @default(cuid())
  fantasyPoints     Int
  captain           String
  viceCaptain       String
  userId            String
  user              User                    @relation(fields: [userId], references: [id])
  disabled          Boolean
  players           UserTeamPlayers[]
  tournamentsJoined TournamentJoinedTeams[]
}

model UserTeamPlayers {
  id          String    @id @unique @default(cuid())
  userTeamsId String
  userTeams   UserTeams @relation(fields: [userTeamsId], references: [id])
  playersId   String
  players     Players   @relation(fields: [playersId], references: [id])
}


model Squad{
  id          String  @id @unique @default(cuid())
  name        String  @unique
  logo        String
  captain     String
  viceCaptain String
  players     Players[]
}

model Players {
  id              String              @id @unique @default(cuid())
  name            String
  role            PlayerRole
  dexture         PlayerDexture
  countryStatus   PlayerCountryStatus
  squadId         String
  squad           Squad               @relation(fields: [squadId], references: [id])
  userTeamPlayers UserTeamPlayers[]
  score           PlayerScore[]
}

model PlayerScore {
  id            String  @id @unique @default(cuid())
  playingStatus PlayerPlayingStatus
  fantasyPoints Int
  run           Int
  sixes         Int
  fours         Int
  others        Int
  runsConceded  Int
  wickets       Int
  ballsBowled   Int
  catches       Int
  runout        Int
  dotBall       Int
  playerId      String  @unique
  player        Players @relation(fields: [playerId], references: [id])
  matchId       String
  match         Matches @relation(fields: [matchId], references: [id])
  @@unique([playerId, matchId])
}

model Matches{
  id              String @id @unique @default(cuid())
  team1Id         String
  team2Id         String
  venue           String
  date            DateTime
  winner          MatchesWinner
  toss            MatchesWinner
  elected         MatchTossElection
  status          TournamentStatus
  innings         Inning[]
  playerScore     PlayerScore[]
}

model Inning{
  id            String @id @unique @default(cuid())
  whichInning   WhichInning
  score         Int
  wickets       Int
  extras        Int
  batsman1      String?
  batsman2      String?
  bowler        String?
  matchId       String
  match         Matches @relation(fields: [matchId], references: [id])
  balls         Balls[]
}

model Balls{
  id            String @id @unique @default(cuid())
  ballNo        Int
  whatHappend   WhatHappend
  bowler        String
  batsman       String
  catch         String?
  runout        String?
  inningId      String
  inning        Inning @relation(fields: [inningId], references: [id])
}

model Tournament{
  id                    String @id @unique @default(cuid())
  maxLimit              Int
  entryFee              Int
  prizePool             Int
  winner                String
  ownerId               String
  tournamentJoinedTeams TournamentJoinedTeams[]
  teamsJoined           Int
  status                TournamentStatus
  owner                 User                    @relation(fields: [ownerId], references: [id])
}

model TournamentJoinedTeams{
  id              String @id @unique @default(cuid())
  tournamentId    String
  tournament      Tournament @relation(fields: [tournamentId], references: [id])
  userTeamId      String
  userTeam        UserTeams @relation(fields: [userTeamId], references: [id])
}

enum WhatHappend {
  wd
  six
  four
  dot
  runout
  catch
  bowled
  nb
  fh
  zero
  one
  two
  three
}

enum WhichInning {
  first
  second
}

enum TournamentStatus {
  upcoming
  started
  ended
}

enum MatchTossElection {
  ball
  bat
  tobeDeclared
}

enum MatchesWinner {
  team1
  team2
  tobeDeclared
}

enum PlayerRole {
  batsman
  bowler
  wk
  ar
}

enum PlayerDexture {
  right
  left
}

enum PlayerPlayingStatus {
  playing
  substitute
  notPlaying
}

enum PlayerCountryStatus {
  indian
  foreign
}

enum UserRole {
  user
  admin
}
